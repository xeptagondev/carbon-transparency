{
	"info": {
		"_postman_id": "19c0a81b-1a90-42f6-bb4c-db12f1e1b5b6",
		"name": "Entity-Add-Validate-Unvalidate-Edit-Delete",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "26990381",
		"_collection_link": "https://blue-firefly-686422.postman.co/workspace/D4C-Transparency---V2~58e5dcb3-5241-4f4a-b74f-3c36c12760e2/collection/26990381-19c0a81b-1a90-42f6-bb4c-db12f1e1b5b6?action=share&source=collection_link&creator=26990381"
	},
	"item": [
		{
			"name": "user_login",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let body = {\r",
							"  username: pm.iterationData.get(\"username\"),\r",
							"  password: pm.environment.get(\"password\")\r",
							"};\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"if(pm.response.code === 201 || pm.response.code === 200) {\r",
							"\r",
							"    pm.test(response.role + \" login success!\", function(){\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"\r",
							"        const user_token = response.access_token;\r",
							"        pm.collectionVariables.set(\"user_token\",user_token);\r",
							"\r",
							"        pm.execution.setNextRequest(\"add_action\");\r",
							"    });\r",
							"\r",
							"}else {\r",
							"    pm.test(\"User login failed!\", function(){\r",
							"        pm.expect(pm.response.code).to.be.oneOf([400, 401]);\r",
							"        pm.execution.setNextRequest(null);\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}auth/login"
			},
			"response": []
		},
		{
			"name": "add_action",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let body = {\r",
							"    \"title\": \"Test action title\",\r",
							"    \"type\": \"Mitigation\",\r",
							"    \"description\": \"Test action description\",\r",
							"    \"objective\": \"Test action objective\",\r",
							"    \"instrumentType\": [\"Policy\"],\r",
							"    \"status\": \"Planned\",\r",
							"    \"startYear\": 2014,\r",
							"    \"natAnchor\": [\"NDC\"],\r",
							"    \"sector\": pm.iterationData.get(\"sector\"),\r",
							"    \"documents\" : [\r",
							"    {\r",
							"        \"title\": \"test doc.docx\",\r",
							"        \"data\": pm.collectionVariables.get(\"doc\")\r",
							"    }\r",
							"],\r",
							"    \"kpis\": [\r",
							"        {\r",
							"            \"name\": \"KPI-1-Action1\",\r",
							"            \"creatorType\": \"action\",\r",
							"            \"kpiUnit\" : \"GWp-installed\",\r",
							"            \"expected\": 500.50\r",
							"        }\r",
							"    ]\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"const status = pm.iterationData.get(\"add_status\");\r",
							"\r",
							"if(pm.response.code === 201 || pm.response.code === 200) {\r",
							"    pm.test(\"Action created successfully - \" + response.data.actionId, function(){\r",
							"        pm.response.to.have.status(status);\r",
							"\r",
							"        const ActionID = response.data.actionId;\r",
							"        pm.collectionVariables.set(\"ActionID\", ActionID);\r",
							"\r",
							"        pm.execution.setNextRequest(\"add_programme\");\r",
							"    });\r",
							"} else {\r",
							"    pm.test(\"Forbidden\", function(){\r",
							"        pm.expect(pm.response.to.have.status(status));\r",
							"    });\r",
							"\r",
							"    pm.execution.setNextRequest(null);\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}actions/add"
			},
			"response": []
		},
		{
			"name": "add_programme",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let body = {\r",
							"    \"actionId\" : pm.collectionVariables.get(\"ActionID\"),\r",
							"    \"title\": \"Test programme title\",\r",
							"    \"description\": \"Test programme description\",\r",
							"    \"objective\": \"Test programme objective\",\r",
							"    \"affectedSubSector\": [\r",
							"        \"Commercial\"\r",
							"    ],\r",
							"    \"startYear\": 2014,\r",
							"    \"natImplementor\": [\r",
							"        \"Agriculture Department\",\r",
							"        \"Climate Change Department\"\r",
							"    ],\r",
							"    \"investment\": 30.5,\r",
							"    \"programmeStatus\": \"Planned\",\r",
							"    \"comments\": \"Test programme comment\",\r",
							"    \"documents\": [\r",
							"        {\r",
							"        \"title\": \"test doc.docx\",\r",
							"        \"data\": pm.collectionVariables.get(\"doc\")\r",
							"        }\r",
							"    ],\r",
							"    \"kpis\": [\r",
							"        {\r",
							"            \"name\": \"KPI-3-Prog2\",\r",
							"            \"kpiUnit\": \"GWp-installed\",\r",
							"            \"creatorType\": \"programme\",\r",
							"            \"expected\": 100.20\r",
							"        }\r",
							"    ]\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"const status = pm.iterationData.get(\"add_status\");\r",
							"\r",
							"if(pm.response.code === 201 || pm.response.code === 200) {\r",
							"   pm.test(\"Programme created successfully - \" + response.data.programmeId, function(){\r",
							"        pm.response.to.have.status(status);\r",
							"\r",
							"        const ProgrammeID = response.data.programmeId;\r",
							"        pm.collectionVariables.set(\"ProgrammeID\", ProgrammeID);\r",
							"    });\r",
							"} else {\r",
							"    pm.test(\"Forbidden\", function(){\r",
							"        pm.expect(pm.response.to.have.status(status));\r",
							"    });\r",
							"}\r",
							"\r",
							"pm.execution.setNextRequest(\"add_project\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}programmes/add"
			},
			"response": []
		},
		{
			"name": "add_project",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let body = {\r",
							"    \"programmeId\": pm.collectionVariables.get(\"ProgrammeID\"),\r",
							"    \"title\": \"Test project title\",\r",
							"    \"description\": \"Test project description\",\r",
							"    \"projectStatus\": \"Planned\",\r",
							"    \"startYear\": 2014,\r",
							"    \"endYear\": 2015,\r",
							"    \"recipientEntities\": [\r",
							"        \"Minister for Investment, Entrepreneurship and Industry\"\r",
							"    ],\r",
							"    \"internationalImplementingEntities\": [\r",
							"        \"UNFCCC\"\r",
							"    ],\r",
							"    \"comment\": \"Test project comment\",\r",
							"    \"documents\": [\r",
							"        {\r",
							"        \"title\": \"test doc.docx\",\r",
							"        \"data\": pm.collectionVariables.get(\"doc\")\r",
							"        }\r",
							"    ],\r",
							"    \"kpis\": [\r",
							"        {\r",
							"            \"name\": \"KPI-5-Proj2\",\r",
							"            \"kpiUnit\": \"GWp-installed\",\r",
							"            \"creatorType\": \"project\",\r",
							"            \"expected\": 50.15\r",
							"        }\r",
							"    ]\r",
							"}\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const status = pm.iterationData.get(\"add_status\");\r",
							"\r",
							"if(pm.response.code === 201 || pm.response.code === 200) {\r",
							"   pm.test(\"Project created successfully - \" + response.data.projectId, function(){\r",
							"        pm.response.to.have.status(status);\r",
							"\r",
							"        const startYear = response.data.startYear;\r",
							"        pm.collectionVariables.set(\"startYear\", startYear);\r",
							"\r",
							"        const ProjectID = response.data.projectId;\r",
							"        pm.collectionVariables.set(\"ProjectID\", ProjectID);\r",
							"    });\r",
							"} else {\r",
							"    pm.test(\"Forbidden\", function(){\r",
							"        pm.expect(pm.response.to.have.status(status));\r",
							"    });\r",
							"}\r",
							"\r",
							"pm.execution.setNextRequest(\"add_activity\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}projects/add"
			},
			"response": []
		},
		{
			"name": "add_activity",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let body = {\r",
							"    \"startYear\": pm.collectionVariables.get(\"startYear\"), \r",
							"    \"parentType\": \"project\",\r",
							"    \"parentId\": pm.collectionVariables.get(\"ProjectID\"),\r",
							"    \"title\":\"Test Activity\",\r",
							"    \"description\":\"Test activity description\",\r",
							"    \"status\":\"Planned\",\r",
							"    \"measure\":\"With Measures\",\r",
							"    \"nationalImplementingEntity\":[\"Agriculture Department\"],\r",
							"    \"internationalImplementingEntity\":[\"AFD\"],\r",
							"    \"anchoredInNationalStrategy\":true,\r",
							"    \"meansOfImplementation\":\"Financing\",\r",
							"    \"technologyType\":\"Energy Efficiency\",\r",
							"    \"etfDescription\":\"Test EFT desciption\",\r",
							"    \"comment\":\"Test Activity Comment\",\r",
							"    \"ghgsAffected\": \"CO2\",\r",
							"    \"achievedGHGReduction\":1551,\r",
							"    \"expectedGHGReduction\":1901,\r",
							"    \"documents\":[\r",
							"        {\r",
							"        \"title\": \"test doc.docx\",\r",
							"        \"data\": pm.collectionVariables.get(\"doc\")\r",
							"        }\r",
							"    ],\r",
							"    \"mitigationInfo\":\r",
							"        {\r",
							"            \"mitigationMethodology\":\"Test mitigation methodology\",\r",
							"            \"mitigationMethodologyDescription\":\"Test mitigation methodology description\",\r",
							"            \"mitigationCalcEntity\":\"Entity Completing the Mitigation Calculations\",\r",
							"            \"comments\":\"Test mitigation entity\",\r",
							"            \"methodologyDocuments\":[\r",
							"                {\r",
							"                    \"title\": \"test doc.docx\",\r",
							"                    \"data\": pm.collectionVariables.get(\"doc\")\r",
							"                }\r",
							"            ],\r",
							"            \"resultDocuments\":[\r",
							"                {\r",
							"                    \"title\": \"test doc.docx\",\r",
							"                    \"data\": pm.collectionVariables.get(\"doc\")\r",
							"                }\r",
							"            ]\r",
							"        },\r",
							"    \"mitigationTimeline\":\r",
							"    {\r",
							"    \"expected\": {\r",
							"        \"baselineEmissions\": [\r",
							"            123,\r",
							"            11,\r",
							"            11,\r",
							"            22,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0\r",
							"        ],\r",
							"        \"activityEmissionsWithM\": [\r",
							"            123,\r",
							"            33,\r",
							"            33,\r",
							"            23,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0\r",
							"        ],\r",
							"        \"activityEmissionsWithAM\": [\r",
							"            22,\r",
							"            22,\r",
							"            12,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0\r",
							"        ],\r",
							"        \"expectedEmissionReductWithM\": [\r",
							"            123,\r",
							"            33,\r",
							"            33,\r",
							"            23,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0\r",
							"        ],\r",
							"        \"expectedEmissionReductWithAM\": [\r",
							"            22,\r",
							"            22,\r",
							"            12,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0\r",
							"        ],\r",
							"        \"total\": {\r",
							"            \"baselineEmissions\": 167,\r",
							"            \"activityEmissionsWithM\": 212,\r",
							"            \"activityEmissionsWithAM\": 56,\r",
							"            \"expectedEmissionReductWithM\": 212,\r",
							"            \"expectedEmissionReductWithAM\": 56\r",
							"        }\r",
							"    },\r",
							"    \"actual\": {\r",
							"        \"baselineActualEmissions\": [\r",
							"            33,\r",
							"            22,\r",
							"            1,\r",
							"            23,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0\r",
							"        ],\r",
							"        \"activityActualEmissions\": [\r",
							"            11,\r",
							"            33,\r",
							"            12,\r",
							"            123,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0\r",
							"        ],\r",
							"        \"actualEmissionReduct\": [\r",
							"            11,\r",
							"            33,\r",
							"            12,\r",
							"            123,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0\r",
							"        ],\r",
							"        \"total\": {\r",
							"            \"baselineActualEmissions\": 79,\r",
							"            \"activityActualEmissions\": 179,\r",
							"            \"actualEmissionReduct\": 179\r",
							"        }\r",
							"    },\r",
							"    \"startYear\": 2014,\r",
							"    \"unit\": \"CO2\"\r",
							"}\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const status = pm.iterationData.get(\"add_status\");\r",
							"\r",
							"if(pm.response.code === 201 || pm.response.code === 200) {\r",
							"   pm.test(\"Activity created successfully - \" + response.data.activityId, function(){\r",
							"        pm.response.to.have.status(status);\r",
							"\r",
							"        const ActivityID = response.data.activityId;\r",
							"        pm.collectionVariables.set(\"ActivityID\", ActivityID);\r",
							"    });\r",
							"} else {\r",
							"    pm.test(\"Forbidden\", function(){\r",
							"        pm.expect(pm.response.to.have.status(status));\r",
							"    });\r",
							"}\r",
							"\r",
							"pm.execution.setNextRequest(\"add_support\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}activities/add"
			},
			"response": []
		},
		{
			"name": "add_support",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let body = {\r",
							"    \"activityId\": pm.collectionVariables.get(\"ActivityID\"),\r",
							"    \"direction\": [\r",
							"    \"Needed\"\r",
							"  ],\r",
							"  \"financeNature\": [\r",
							"    \"International\"\r",
							"  ],\r",
							"  \"internationalSupportChannel\": [\r",
							"    \"Multilateral\"\r",
							"  ],\r",
							"  \"internationalFinancialInstrument\": [\r",
							"    \"Grant\"\r",
							"  ],\r",
							"  \"nationalFinancialInstrument\": [\r",
							"    \"Grant\"\r",
							"  ],\r",
							"  \"financingStatus\": [\r",
							"    \"Committed\"\r",
							"  ],\r",
							"  \"internationalSource\": [\r",
							"    \"AFC\"\r",
							"  ],\r",
							"    \"nationalSource\": \"test national source\",\r",
							"    \"requiredAmount\": 300,\r",
							"    \"neededLocal\": 400,\r",
							"    \"receivedAmount\": 500,\r",
							"    \"receivedLocal\": 600,\r",
							"    \"exchangeRate\": 50\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const status = pm.iterationData.get(\"add_status\");\r",
							"\r",
							"if(pm.response.code === 201 || pm.response.code === 200) {\r",
							"   pm.test(\"Support created successfully - \" + response.data.supportId, function(){\r",
							"        pm.response.to.have.status(status);\r",
							"\r",
							"        const SupportID = response.data.supportId;\r",
							"        pm.collectionVariables.set(\"SupportID\", SupportID);\r",
							"    });\r",
							"} else {\r",
							"    pm.test(\"Forbidden\", function(){\r",
							"        pm.expect(pm.response.to.have.status(status));\r",
							"    });\r",
							"}\r",
							"\r",
							"if(pm.iterationData.get(\"action\") === \"validate\"){\r",
							"    pm.execution.setNextRequest(\"user_login_to_validate\");\r",
							"} else if(pm.iterationData.get(\"action\") === \"delete\"){\r",
							"    pm.execution.setNextRequest(\"user_login_to_delete\");\r",
							"} else if(pm.iterationData.get(\"action\") === \"update\"){\r",
							"    pm.execution.setNextRequest(\"user_login_to_update\");\r",
							"} else {\r",
							"    pm.execution.setNextRequest(\"user_login_to_delete\");\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}supports/add"
			},
			"response": []
		},
		{
			"name": "user_login_to_validate",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let body = {\r",
							"  username: pm.iterationData.get(\"username_2\"),\r",
							"  password: pm.environment.get(\"password\")\r",
							"};\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"if(pm.response.code === 201 || pm.response.code === 200) {\r",
							"\r",
							"    pm.test(response.role + \" login success!\", function(){\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"\r",
							"        const user_token = response.access_token;\r",
							"        pm.collectionVariables.set(\"user_token\",user_token);\r",
							"\r",
							"        pm.execution.setNextRequest(\"validate_action\");\r",
							"    });\r",
							"\r",
							"}else {\r",
							"    pm.test(\"User login failed!\", function(){\r",
							"        pm.expect(pm.response.code).to.be.oneOf([400, 401]);\r",
							"        pm.execution.setNextRequest(null);\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}auth/login"
			},
			"response": []
		},
		{
			"name": "validate_action",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"let body = {\r",
							"  \"entityId\": pm.collectionVariables.get(\"ActionID\"),\r",
							"//   \"entityId\" : \"A075\",\r",
							"  \"validateStatus\" : true\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const status = pm.iterationData.get(\"validate_status\");\r",
							"\r",
							"pm.test(\"Action verified successfully!\" , function(){\r",
							"    pm.response.to.have.status(status);\r",
							"    pm.execution.setNextRequest(\"validate_programme\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}actions/validateStatus"
			},
			"response": []
		},
		{
			"name": "validate_programme",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"let body = {\r",
							"  \"entityId\": pm.collectionVariables.get(\"ProgrammeID\"),\r",
							"//   \"entityId\" : \"P072\",\r",
							"  \"validateStatus\" : true\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const status = pm.iterationData.get(\"validate_status\");\r",
							"\r",
							"pm.test(\"Programme verified successfully!\" , function(){\r",
							"    pm.response.to.have.status(status);\r",
							"    pm.execution.setNextRequest(\"validate_project\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}programmes/validateStatus"
			},
			"response": []
		},
		{
			"name": "validate_project",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"let body = {\r",
							"\"entityId\": pm.collectionVariables.get(\"ProjectID\"),\r",
							"// \"entityId\" : \"J072\",\r",
							"\"validateStatus\" : true\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const status = pm.iterationData.get(\"validate_status\");\r",
							"\r",
							"pm.test(\"Project verified successfully!\" , function(){\r",
							"    pm.response.to.have.status(status);\r",
							"    pm.execution.setNextRequest(\"validate_activity\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}projects/validateStatus"
			},
			"response": []
		},
		{
			"name": "validate_activity",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"let body = {\r",
							"  \"entityId\": pm.collectionVariables.get(\"ActivityID\"),\r",
							"//   \"entityId\" : \"T00074\",\r",
							"  \"validateStatus\" : true\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const status = pm.iterationData.get(\"validate_status\");\r",
							"\r",
							"pm.test(\"Activity verified successfully!\" , function(){\r",
							"    pm.response.to.have.status(status);\r",
							"    pm.execution.setNextRequest(\"validate_support\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}activities/validateStatus"
			},
			"response": []
		},
		{
			"name": "validate_support",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"let body = {\r",
							"  \"entityId\": pm.collectionVariables.get(\"SupportID\"),\r",
							"//   \"entityId\" : \"S00073\",\r",
							"  \"validateStatus\" : true\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const status = pm.iterationData.get(\"validate_status\");\r",
							"\r",
							"pm.test(\"Support verified successfully!\" , function(){\r",
							"    pm.response.to.have.status(status);\r",
							"    // pm.execution.setNextRequest(null);\r",
							"});\r",
							"\r",
							"\r",
							"if(pm.iterationData.get(\"action-2\") === \"update\"){\r",
							"    pm.execution.setNextRequest(\"user_login_to_update\");\r",
							"} else if(pm.iterationData.get(\"action-2\") === \"unvalidate\"){\r",
							"    pm.execution.setNextRequest(\"user_login_to_unvalidate\");\r",
							"} else if(pm.iterationData.get(\"action-2\") === \"deleteData\"){\r",
							"    pm.execution.setNextRequest(\"user_login_to_delete\");\r",
							"} else {\r",
							"    pm.execution.setNextRequest(null);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}supports/validateStatus"
			},
			"response": []
		},
		{
			"name": "user_login_to_unvalidate",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let body = {\r",
							"  username: pm.iterationData.get(\"username_5\"),\r",
							"  password: pm.environment.get(\"password\")\r",
							"};\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"if(pm.response.code === 201 || pm.response.code === 200) {\r",
							"\r",
							"    pm.test(response.role + \" login success!\", function(){\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"\r",
							"        const user_token = response.access_token;\r",
							"        pm.collectionVariables.set(\"user_token\",user_token);\r",
							"\r",
							"        pm.execution.setNextRequest(\"unvalidate_action\");\r",
							"    });\r",
							"\r",
							"}else {\r",
							"    pm.test(\"User login failed!\", function(){\r",
							"        pm.expect(pm.response.code).to.be.oneOf([400, 401]);\r",
							"        pm.execution.setNextRequest(null);\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}auth/login"
			},
			"response": []
		},
		{
			"name": "unvalidate_action",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"let body = {\r",
							"  \"entityId\": pm.collectionVariables.get(\"ActionID\"),\r",
							"  \"validateStatus\" : false\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const status = pm.iterationData.get(\"unvalidate_status\");\r",
							"\r",
							"pm.test(\"Action unverified successfully!\" , function(){\r",
							"    pm.response.to.have.status(status);\r",
							"    pm.execution.setNextRequest(\"unvalidate_programme\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}actions/validateStatus"
			},
			"response": []
		},
		{
			"name": "unvalidate_programme",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"let body = {\r",
							"  \"entityId\": pm.collectionVariables.get(\"ProgrammeID\"),\r",
							"  \"validateStatus\" : false\r",
							"// \"entityId\" : \"P030\"\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const status = pm.iterationData.get(\"unvalidate_status\");\r",
							"\r",
							"pm.test(\"Programme unverified successfully!\" , function(){\r",
							"    pm.response.to.have.status(status);\r",
							"    pm.execution.setNextRequest(\"unvalidate_project\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}programmes/validateStatus"
			},
			"response": []
		},
		{
			"name": "unvalidate_project",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"let body = {\r",
							"\"entityId\": pm.collectionVariables.get(\"ProjectID\"),\r",
							"\"validateStatus\" : false\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const status = pm.iterationData.get(\"unvalidate_status\");\r",
							"\r",
							"pm.test(\"Project unverified successfully!\" , function(){\r",
							"    pm.response.to.have.status(status);\r",
							"    pm.execution.setNextRequest(\"unvalidate_activity\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}projects/validateStatus"
			},
			"response": []
		},
		{
			"name": "unvalidate_activity",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"let body = {\r",
							"  \"entityId\": pm.collectionVariables.get(\"ActivityID\"),\r",
							"  \"validateStatus\" : false\r",
							"//   \"entityId\" : \"T00030\"\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const status = pm.iterationData.get(\"unvalidate_status\");\r",
							"\r",
							"pm.test(\"Activity unverified successfully!\" , function(){\r",
							"    pm.response.to.have.status(status);\r",
							"    pm.execution.setNextRequest(\"unvalidate_support\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}activities/validateStatus"
			},
			"response": []
		},
		{
			"name": "unvalidate_support",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"let body = {\r",
							"  \"entityId\": pm.collectionVariables.get(\"SupportID\"),\r",
							"  \"validateStatus\" : false\r",
							"//   \"entityId\" : \"S00030\"\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const status = pm.iterationData.get(\"unvalidate_status\");\r",
							"\r",
							"pm.test(\"Support unverified successfully!\" , function(){\r",
							"    pm.response.to.have.status(status);\r",
							"    pm.execution.setNextRequest(\"user_login_to_delete\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}supports/validateStatus"
			},
			"response": []
		},
		{
			"name": "user_login_to_delete",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let body = {\r",
							"  username: pm.iterationData.get(\"username_3\"),\r",
							"  password: pm.environment.get(\"password\")\r",
							"};\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"if(pm.response.code === 201 || pm.response.code === 200) {\r",
							"\r",
							"    pm.test(response.role + \" login success!\", function(){\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"\r",
							"        const user_token = response.access_token;\r",
							"        pm.collectionVariables.set(\"user_token\",user_token);\r",
							"\r",
							"        pm.execution.setNextRequest(\"delete_action\");\r",
							"    });\r",
							"\r",
							"}else {\r",
							"    pm.test(\"User login failed!\", function(){\r",
							"        pm.expect(pm.response.code).to.be.oneOf([400, 401]);\r",
							"        pm.execution.setNextRequest(null);\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}auth/login"
			},
			"response": []
		},
		{
			"name": "delete_action",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let body = {\r",
							"  \"entityId\": pm.collectionVariables.get(\"ActionID\")\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const status = pm.iterationData.get(\"delete_status\");\r",
							"\r",
							"pm.test(\"Action deleted successfully!\" , function(){\r",
							"    pm.response.to.have.status(status);\r",
							"    pm.execution.setNextRequest(\"delete_programme\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}actions/delete"
			},
			"response": []
		},
		{
			"name": "delete_programme",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let body = {\r",
							"  \"entityId\": pm.collectionVariables.get(\"ProgrammeID\")\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const status = pm.iterationData.get(\"delete_status\");\r",
							"\r",
							"pm.test(\"Programme deleted successfully!\" , function(){\r",
							"    pm.response.to.have.status(status);\r",
							"    pm.execution.setNextRequest(\"delete_project\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}programmes/delete"
			},
			"response": []
		},
		{
			"name": "delete_project",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let body = {\r",
							"  \"entityId\": pm.collectionVariables.get(\"ProjectID\")\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const status = pm.iterationData.get(\"delete_status\");\r",
							"\r",
							"pm.test(\"Project deleted successfully!\" , function(){\r",
							"    pm.response.to.have.status(status);\r",
							"    pm.execution.setNextRequest(null);\r",
							"});\r",
							"\r",
							"// pm.execution.setNextRequest(\"delete_activity\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}projects/delete"
			},
			"response": []
		},
		{
			"name": "delete_activity",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let body = {\r",
							"    \"entityId\": \"T00030\"\r",
							"    // \"entityId\": pm.collectionVariables.get(\"ActivityID\")\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const status = pm.iterationData.get(\"delete_status\");\r",
							"\r",
							"pm.test(\"Activity deleted successfully!\" , function(){\r",
							"    pm.response.to.have.status(status); \r",
							"});\r",
							"\r",
							"pm.execution.setNextRequest(null);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}activities/delete"
			},
			"response": []
		},
		{
			"name": "delete_support",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let body = {\r",
							"  \"entityId\": \"S00028\"\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const status = pm.iterationData.get(\"delete_status\");\r",
							"\r",
							"pm.test(\"Support deleted successfully!\" , function(){\r",
							"    pm.response.to.have.status(200); \r",
							"});\r",
							"\r",
							"pm.execution.setNextRequest(null);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}supports/delete"
			},
			"response": []
		},
		{
			"name": "user_login_to_update",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let body = {\r",
							"  username: pm.iterationData.get(\"username_4\"),\r",
							"  password: pm.environment.get(\"password\")\r",
							"};\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"if(pm.response.code === 201 || pm.response.code === 200) {\r",
							"\r",
							"    pm.test(response.role + \" login success!\", function(){\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"\r",
							"        const user_token = response.access_token;\r",
							"        pm.collectionVariables.set(\"user_token\",user_token);\r",
							"\r",
							"        pm.execution.setNextRequest(\"update_action\");\r",
							"    });\r",
							"\r",
							"}else {\r",
							"    pm.test(\"User login failed!\", function(){\r",
							"        pm.expect(pm.response.code).to.be.oneOf([400, 401]);\r",
							"        pm.execution.setNextRequest(null);\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}auth/login"
			},
			"response": []
		},
		{
			"name": "update_action",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let body = {\r",
							"    \"actionId\" : pm.collectionVariables.get(\"ActionID\"),\r",
							"    \"title\": \"Test action title updated\",\r",
							"    \"type\": \"Mitigation\",\r",
							"    \"description\": \"Test action description updated\",\r",
							"    \"objective\": \"Test action objective updated\",\r",
							"    \"instrumentType\": [\"Policy\"],\r",
							"    \"status\": \"Planned\",\r",
							"    \"startYear\": 2014,\r",
							"    \"natAnchor\": [\"NDC\"],\r",
							"    \"sector\": pm.iterationData.get(\"update-sector\"),\r",
							"    \"newDocuments\" : [\r",
							"                {\r",
							"                    \"title\": \"test doc.docx\",\r",
							"                    \"data\": pm.collectionVariables.get(\"doc\")\r",
							"                }\r",
							"],\r",
							"    \"kpis\": [\r",
							"        {\r",
							"            \"name\": \"KPI-1-Action1\",\r",
							"            \"creatorType\": \"action\",\r",
							"            \"kpiUnit\" : \"GWp-installed\",\r",
							"            \"expected\": 500.50\r",
							"        }\r",
							"    ]\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const status = pm.iterationData.get(\"update_status\");\r",
							"\r",
							"pm.test(\"Action updated successfully!\" , function(){\r",
							"    pm.response.to.have.status(status);\r",
							"    pm.execution.setNextRequest(\"update_programme\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}actions/update"
			},
			"response": []
		},
		{
			"name": "update_programme",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let body = {\r",
							"    \"actionId\" : pm.collectionVariables.get(\"ActionID\"),\r",
							"    \"programmeId\" : pm.collectionVariables.get(\"ProgrammeID\"),\r",
							"    \"title\": \"Test programme title updated\",\r",
							"    \"description\": \"Test programme description updated\",\r",
							"    \"objective\": \"Test programme objective updated\",\r",
							"    \"affectedSubSector\": [\r",
							"        \"Commercial\"\r",
							"    ],\r",
							"    \"startYear\": 2014,\r",
							"    \"natImplementor\": [\r",
							"        \"Agriculture Department\",\r",
							"        \" Climate Change Department\"\r",
							"    ],\r",
							"    \"investment\": 30.5,\r",
							"    \"programmeStatus\": \"Planned\",\r",
							"    \"comments\": \"Test programme comment\",\r",
							"    \"newDocuments\": [\r",
							"                {\r",
							"                    \"title\": \"test doc.docx\",\r",
							"                    \"data\": pm.collectionVariables.get(\"doc\")\r",
							"                }\r",
							"    ],\r",
							"    \"kpis\": [\r",
							"        {\r",
							"            \"name\": \"KPI-3-Prog2\",\r",
							"            \"kpiUnit\": \"GWp-installed\",\r",
							"            \"creatorType\": \"programme\",\r",
							"            \"expected\": 100.20\r",
							"        }\r",
							"    ]\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const status = pm.iterationData.get(\"update_status\");\r",
							"\r",
							"pm.test(\"Programme updated successfully!\" , function(){\r",
							"    pm.response.to.have.status(status);\r",
							"    pm.execution.setNextRequest(\"update_project\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}programmes/update"
			},
			"response": []
		},
		{
			"name": "update_project",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let body = {\r",
							"    \"projectId\" : pm.collectionVariables.get(\"ProjectID\"),\r",
							"    \"programmeId\": pm.collectionVariables.get(\"ProgrammeID\"),\r",
							"    \"title\": \"Test project title updated\",\r",
							"    \"description\": \"Test project description\",\r",
							"    \"projectStatus\": \"Planned\",\r",
							"    \"startYear\": 2014,\r",
							"    \"endYear\": 2015,\r",
							"    \"recipientEntities\": [\r",
							"        \"Minister for Investment, Entrepreneurship and Industry\"\r",
							"    ],\r",
							"    \"internationalImplementingEntities\": [\r",
							"        \"UNFCCC\"\r",
							"    ],\r",
							"    \"comment\": \"Test project comment\",\r",
							"    \"newDocuments\": [\r",
							"                {\r",
							"                    \"title\": \"test doc.docx\",\r",
							"                    \"data\": pm.collectionVariables.get(\"doc\")\r",
							"                }\r",
							"    ],\r",
							"    \"kpis\": [\r",
							"        {\r",
							"            \"name\": \"KPI-5-Proj2\",\r",
							"            \"kpiUnit\": \"GWp-installed\",\r",
							"            \"creatorType\": \"project\",\r",
							"            \"expected\": 50.15\r",
							"        }\r",
							"    ]\r",
							"}\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const status = pm.iterationData.get(\"update_status\");\r",
							"\r",
							"pm.test(\"Project updated successfully!\" , function(){\r",
							"    pm.response.to.have.status(status);\r",
							"    pm.execution.setNextRequest(\"update_activity\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}projects/update"
			},
			"response": []
		},
		{
			"name": "update_activity",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let body = {\r",
							"    \"startYear\": pm.collectionVariables.get(\"startYear\"), \r",
							"    \"activityId\" : pm.collectionVariables.get(\"ActivityID\"),\r",
							"    \"parentType\": \"project\",\r",
							"    \"parentId\": pm.collectionVariables.get(\"ProjectID\"),\r",
							"    \"title\":\"Test Activity updated\",\r",
							"    \"description\":\"Test activity description\",\r",
							"    \"status\":\"Planned\",\r",
							"    \"measure\":\"With Measures\",\r",
							"    \"nationalImplementingEntity\":[\"Agriculture Department\"],\r",
							"    \"internationalImplementingEntity\":[\"AFD\"],\r",
							"    \"anchoredInNationalStrategy\":true,\r",
							"    \"meansOfImplementation\":\"Financing\",\r",
							"    \"technologyType\":\"Energy Efficiency\",\r",
							"    \"etfDescription\":\"Test EFT desciption\",\r",
							"    \"comment\":\"Test Activity Comment\",\r",
							"    \"ghgsAffected\": \"CO2\",\r",
							"    \"achievedGHGReduction\":1551,\r",
							"    \"expectedGHGReduction\":1901,\r",
							"    \"newDocuments\":[\r",
							"                {\r",
							"                    \"title\": \"test doc.docx\",\r",
							"                    \"data\": pm.collectionVariables.get(\"doc\")\r",
							"                }\r",
							"    ],\r",
							"    \"mitigationInfo\":\r",
							"        {\r",
							"            \"mitigationMethodology\":\"Test mitigation methodology\",\r",
							"            \"mitigationMethodologyDescription\":\"Test mitigation methodology description\",\r",
							"            \"mitigationCalcEntity\":\"Entity Completing the Mitigation Calculations\",\r",
							"            \"comments\":\"Test mitigation entity\",\r",
							"            \"methodologyDocuments\":[\r",
							"            ],\r",
							"            \"resultDocuments\":[\r",
							"            ]\r",
							"        },\r",
							"    \"mitigationTimeline\":\r",
							"    {\r",
							"    \"expected\": {\r",
							"        \"baselineEmissions\": [\r",
							"            123,\r",
							"            11,\r",
							"            11,\r",
							"            22,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0\r",
							"        ],\r",
							"        \"activityEmissionsWithM\": [\r",
							"            123,\r",
							"            33,\r",
							"            33,\r",
							"            23,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0\r",
							"        ],\r",
							"        \"activityEmissionsWithAM\": [\r",
							"            22,\r",
							"            22,\r",
							"            12,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0\r",
							"        ],\r",
							"        \"expectedEmissionReductWithM\": [\r",
							"            123,\r",
							"            33,\r",
							"            33,\r",
							"            23,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0\r",
							"        ],\r",
							"        \"expectedEmissionReductWithAM\": [\r",
							"            22,\r",
							"            22,\r",
							"            12,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0\r",
							"        ],\r",
							"        \"total\": {\r",
							"            \"baselineEmissions\": 167,\r",
							"            \"activityEmissionsWithM\": 212,\r",
							"            \"activityEmissionsWithAM\": 56,\r",
							"            \"expectedEmissionReductWithM\": 212,\r",
							"            \"expectedEmissionReductWithAM\": 56\r",
							"        }\r",
							"    },\r",
							"    \"actual\": {\r",
							"        \"baselineActualEmissions\": [\r",
							"            33,\r",
							"            22,\r",
							"            1,\r",
							"            23,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0\r",
							"        ],\r",
							"        \"activityActualEmissions\": [\r",
							"            11,\r",
							"            33,\r",
							"            12,\r",
							"            123,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0\r",
							"        ],\r",
							"        \"actualEmissionReduct\": [\r",
							"            11,\r",
							"            33,\r",
							"            12,\r",
							"            123,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0\r",
							"        ],\r",
							"        \"total\": {\r",
							"            \"baselineActualEmissions\": 79,\r",
							"            \"activityActualEmissions\": 179,\r",
							"            \"actualEmissionReduct\": 179\r",
							"        }\r",
							"    },\r",
							"    \"startYear\": 2014,\r",
							"    \"unit\": \"CO2\"\r",
							"}\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const status = pm.iterationData.get(\"update_status\");\r",
							"\r",
							"pm.test(\"Activity updated successfully!\" , function(){\r",
							"    pm.response.to.have.status(status);\r",
							"    pm.execution.setNextRequest(\"update_support\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}activities/update"
			},
			"response": []
		},
		{
			"name": "update_support",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let body = {\r",
							"    \"supportId\" : pm.collectionVariables.get(\"SupportID\"),\r",
							"    \"activityId\": pm.collectionVariables.get(\"ActivityID\"),\r",
							"    \"direction\": [\r",
							"    \"Needed\"\r",
							"  ],\r",
							"  \"financeNature\": [\r",
							"    \"International\"\r",
							"  ],\r",
							"  \"internationalSupportChannel\": [\r",
							"    \"Multilateral\"\r",
							"  ],\r",
							"  \"internationalFinancialInstrument\": [\r",
							"    \"Grant\"\r",
							"  ],\r",
							"  \"nationalFinancialInstrument\": [\r",
							"    \"Grant\"\r",
							"  ],\r",
							"  \"financingStatus\": [\r",
							"    \"Committed\"\r",
							"  ],\r",
							"  \"internationalSource\": [\r",
							"    \"AFC\"\r",
							"  ],\r",
							"    \"nationalSource\": \"test national source\",\r",
							"    \"requiredAmount\": 300,\r",
							"    \"neededLocal\": 600,\r",
							"    \"receivedAmount\": 500,\r",
							"    \"receivedLocal\": 700,\r",
							"    \"exchangeRate\": 50\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const status = pm.iterationData.get(\"update_status\");\r",
							"\r",
							"pm.test(\"Support updated successfully!\" , function(){\r",
							"    pm.response.to.have.status(status);\r",
							"    pm.execution.setNextRequest(\"user_login_to_delete\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}supports/update"
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{user_token}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "req_body",
			"value": ""
		},
		{
			"key": "user_token",
			"value": ""
		},
		{
			"key": "doc",
			"value": "data:application/vnd.openxmlformats-officedocument.wordprocessingml.document;base64,",
			"type": "string"
		},
		{
			"key": "ActionID",
			"value": ""
		},
		{
			"key": "ProgrammeID",
			"value": ""
		},
		{
			"key": "ProjectID",
			"value": ""
		},
		{
			"key": "ActivityID",
			"value": ""
		},
		{
			"key": "SupportID",
			"value": ""
		},
		{
			"key": "BaseUrl",
			"value": "http://localhost:9000/national/"
		},
		{
			"key": "startYear",
			"value": ""
		}
	]
}