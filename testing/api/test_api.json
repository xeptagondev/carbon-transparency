{
	"info": {
		"_postman_id": "0f36ef18-fed3-47cc-8d1e-0b78ab08272f",
		"name": "Add_Entities - Remote",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "26990381",
		"_collection_link": "https://blue-firefly-686422.postman.co/workspace/D4C-Transparency---V2~58e5dcb3-5241-4f4a-b74f-3c36c12760e2/collection/26990381-0f36ef18-fed3-47cc-8d1e-0b78ab08272f?action=share&source=collection_link&creator=26990381"
	},
	"item": [
		{
			"name": "user_login",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let body = {\r",
							"  username: pm.iterationData.get(\"username\"),\r",
							"  password: String(pm.iterationData.get(\"password\"))\r",
							"};\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"if(pm.response.code === 201 || pm.response.code === 200) {\r",
							"\r",
							"    pm.test(response.role + \" login success!\", function(){\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"\r",
							"        const user_token = response.access_token;\r",
							"        pm.collectionVariables.set(\"user_token\",user_token);\r",
							"\r",
							"        pm.execution.setNextRequest(\"add_action\");\r",
							"    });\r",
							"\r",
							"}else {\r",
							"    pm.test(\"User login failed!\", function(){\r",
							"        pm.expect(pm.response.code).to.be.oneOf([400, 401]);\r",
							"        pm.execution.setNextRequest(null);\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://transparency-test.carbreg.org:9000/national/auth/login"
			},
			"response": []
		},
		{
			"name": "add_action",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentTimeEpoch = Date.now();\r",
							"\r",
							"let body = {\r",
							"    \"type\": \"Mitigation\",\r",
							"    \"title\": \"Test Action - \" + currentTimeEpoch,\r",
							"    \"description\": \"test description\",\r",
							"    \"objective\": \"test objective\",\r",
							"    \"instrumentType\": [\r",
							"        \"Policy\",\r",
							"        \"Regulatory\",\r",
							"        \"Economic\",\r",
							"        \"Other\"\r",
							"    ],\r",
							"    \"status\": \"Planned\",\r",
							"    \"sector\": pm.iterationData.get(\"sector\"),\r",
							"    \"startYear\": 2015,\r",
							"    \"estimatedInvestment\": 0,\r",
							"    \"natAnchor\": [\r",
							"        \"NAP\",\r",
							"        \"NDC\",\r",
							"        \"Other\"\r",
							"    ],\r",
							"    \"achievedReduct\": 0,\r",
							"    \"expectedReduct\": 0,\r",
							"    \"documents\": [\r",
							"        {\r",
							"            \"title\": \"docx.docx\",\r",
							"            \"data\":pm.collectionVariables.get(\"doc\")\r",
							"        }\r",
							"    ],\r",
							"    \"kpis\": [\r",
							"        {\r",
							"            \"name\": \"KPI-1\",\r",
							"            \"kpiUnit\": \"Wp-installed\",\r",
							"            \"creatorType\": \"action\",\r",
							"            \"expected\": 100.25\r",
							"        }\r",
							"    ]\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"const ActionID = response.data.actionId;\r",
							"pm.collectionVariables.set(\"ActionID\", ActionID);\r",
							"\r",
							"const status = pm.iterationData.get(\"add_status\");\r",
							"\r",
							"pm.test(\"Action created successfully - \" + response.data.actionId, function(){\r",
							"    pm.response.to.have.status(status);\r",
							"    pm.execution.setNextRequest(\"add_programme\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://transparency-test.carbreg.org:9000/national/actions/add"
			},
			"response": []
		},
		{
			"name": "add_programme",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentTimeEpoch = Date.now();\r",
							"\r",
							"let body = {\r",
							"    \"actionId\" : pm.collectionVariables.get(\"ActionID\"),\r",
							"    \"title\": \"Test programme - \" + currentTimeEpoch,\r",
							"    \"description\": \"test description\",\r",
							"    \"objective\": \"test objective\",\r",
							"    \"affectedSubSector\": [\r",
							"        \"Commercial\"\r",
							"    ],\r",
							"    \"startYear\": 2015,\r",
							"    \"natImplementor\": [\r",
							"        \"Agriculture Department\",\r",
							"        \" Climate Change Department\"\r",
							"    ],\r",
							"    \"investment\": 30.5,\r",
							"    \"programmeStatus\": \"Planned\",\r",
							"    \"comments\": \"test comment\",\r",
							"    \"documents\": [\r",
							"        {\r",
							"            \"title\": \"Test programme doc - 1\",\r",
							"            \"data\": pm.collectionVariables.get(\"pdf\")\r",
							"        }\r",
							"    ],\r",
							"    \"kpis\": [\r",
							"        {\r",
							"            \"name\": \"KPI-3-Prog2\",\r",
							"            \"kpiUnit\": \"GWp-installed\",\r",
							"            \"creatorType\": \"programme\",\r",
							"            \"expected\": 100.20\r",
							"        }\r",
							"    ]\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"const ProgrammeID = response.data.programmeId;\r",
							"pm.collectionVariables.set(\"ProgrammeID\", ProgrammeID);\r",
							"\r",
							"const status = pm.iterationData.get(\"add_status\");\r",
							"\r",
							"pm.test(\"Programme created successfully - \" + response.data.programmeId, function(){\r",
							"    pm.response.to.have.status(status);\r",
							"    pm.execution.setNextRequest(\"add_project\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://transparency-test.carbreg.org:9000/national/programmes/add"
			},
			"response": []
		},
		{
			"name": "add_project",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentTimeEpoch = Date.now();\r",
							"\r",
							"let body = {\r",
							"    \"programmeId\": pm.collectionVariables.get(\"ProgrammeID\"),\r",
							"    \"title\": \"Test project - \" + currentTimeEpoch,\r",
							"    \"description\": \"test description\",\r",
							"    \"projectStatus\": \"Planned\",\r",
							"    \"startYear\": 2015,\r",
							"    \"endYear\": 2045,\r",
							"    \"recipientEntities\": [\r",
							"        \"Minister for Investment, Entrepreneurship and Industry\"\r",
							"    ],\r",
							"    \"internationalImplementingEntities\": [\r",
							"        \"UNFCCC\"\r",
							"    ],\r",
							"    \"comment\": \"Test project comment\",\r",
							"    \"documents\": [\r",
							"        {\r",
							"            \"title\": \"Test project doc - 1\",\r",
							"            \"data\": pm.collectionVariables.get(\"pdf\")\r",
							"        }\r",
							"    ],\r",
							"    \"kpis\": [\r",
							"        {\r",
							"            \"name\": \"KPI-5-Proj2\",\r",
							"            \"kpiUnit\": \"GWp-installed\",\r",
							"            \"creatorType\": \"project\",\r",
							"            \"expected\": 50.15\r",
							"        }\r",
							"    ]\r",
							"}\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"const ProjectID = response.data.projectId;\r",
							"pm.collectionVariables.set(\"ProjectID\", ProjectID);\r",
							"\r",
							"const status = pm.iterationData.get(\"add_status\");\r",
							"\r",
							"pm.test(\"Project created successfully - \" + response.data.projectId, function(){\r",
							"    pm.response.to.have.status(status);\r",
							"    pm.execution.setNextRequest(\"add_activity\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://transparency-test.carbreg.org:9000/national/projects/add"
			},
			"response": []
		},
		{
			"name": "add_activity",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const currentTimeEpoch = Date.now();\r",
							"\r",
							"let body = {\r",
							"    \"parentType\": \"project\",\r",
							"    \"parentId\": pm.collectionVariables.get(\"ProjectID\"),\r",
							"    \"title\":\"Test Activity - \" + currentTimeEpoch,\r",
							"    \"description\":\"Test activity description\",\r",
							"    \"status\":\"Planned\",\r",
							"    \"measure\":\"With Measures\",\r",
							"    \"nationalImplementingEntity\":[\"Agriculture Department\"],\r",
							"    \"internationalImplementingEntity\":[\"AFD\"],\r",
							"    \"anchoredInNationalStrategy\":true,\r",
							"    \"meansOfImplementation\":\"Financing\",\r",
							"    \"technologyType\":\"Energy Efficiency\",\r",
							"    \"etfDescription\":\"Test EFT desciption\",\r",
							"    \"comment\":\"Test Activity Comment\",\r",
							"    \"ghgsAffected\" :\"CH4\",\r",
							"    \"achievedGHGReduction\":1554,\r",
							"    \"expectedGHGReduction\":1101,\r",
							"    \"documents\":[\r",
							"        {\"title\":\"Activity Doc - 1\",\r",
							"        \"data\": pm.collectionVariables.get(\"pdf\")\r",
							"        }\r",
							"    ],\r",
							"    \"mitigationInfo\":\r",
							"        {\r",
							"            \"mitigationMethodology\":\"Test mitigation methodology\",\r",
							"            \"mitigationMethodologyDescription\":\"Test mitigation methodology description\",\r",
							"            \"mitigationCalcEntity\":\"Entity Completing the Mitigation Calculations\",\r",
							"            \"comments\":\"Test mitigation entity\",\r",
							"            \"methodologyDocuments\":[\r",
							"                {\"title\":\"Test mitigation doc - 1\",\r",
							"                \"data\": pm.collectionVariables.get(\"pdf\")\r",
							"                }\r",
							"            ],\r",
							"            \"resultDocuments\":[\r",
							"                {\"title\":\"Test mitigation doc - 1\",\r",
							"                \"data\": pm.collectionVariables.get(\"pdf\")\r",
							"                }\r",
							"            ]\r",
							"        },\r",
							"    \"mitigationTimeline\":\r",
							"        {\r",
							"    \"expected\": {\r",
							"        \"baselineEmissions\": [\r",
							"            3,\r",
							"            44,\r",
							"            23,\r",
							"            44,\r",
							"            44,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0\r",
							"        ],\r",
							"        \"activityEmissionsWithM\": [\r",
							"            44,\r",
							"            66,\r",
							"            3,\r",
							"            3,\r",
							"            44,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0\r",
							"        ],\r",
							"        \"activityEmissionsWithAM\": [\r",
							"            33,\r",
							"            55,\r",
							"            44,\r",
							"            5,\r",
							"            66,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0\r",
							"        ],\r",
							"        \"expectedEmissionReductWithM\": [\r",
							"            88,\r",
							"            132,\r",
							"            6,\r",
							"            6,\r",
							"            88,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0\r",
							"        ],\r",
							"        \"expectedEmissionReductWithAM\": [\r",
							"            66,\r",
							"            110,\r",
							"            88,\r",
							"            10,\r",
							"            132,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0\r",
							"        ],\r",
							"        \"total\": {\r",
							"            \"baselineEmissions\": 158,\r",
							"            \"activityEmissionsWithM\": 160,\r",
							"            \"activityEmissionsWithAM\": 203,\r",
							"            \"expectedEmissionReductWithM\": 320,\r",
							"            \"expectedEmissionReductWithAM\": 406\r",
							"        }\r",
							"    },\r",
							"    \"actual\": {\r",
							"        \"baselineActualEmissions\": [\r",
							"            33,\r",
							"            5,\r",
							"            23,\r",
							"            33,\r",
							"            66,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0\r",
							"        ],\r",
							"        \"activityActualEmissions\": [\r",
							"            33,\r",
							"            3,\r",
							"            334,\r",
							"            46,\r",
							"            556,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0\r",
							"        ],\r",
							"        \"actualEmissionReduct\": [\r",
							"            66,\r",
							"            6,\r",
							"            668,\r",
							"            92,\r",
							"            1112,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0,\r",
							"            0\r",
							"        ],\r",
							"        \"total\": {\r",
							"            \"baselineActualEmissions\": 160,\r",
							"            \"activityActualEmissions\": 972,\r",
							"            \"actualEmissionReduct\": 1944\r",
							"        }\r",
							"    },\r",
							"    \"startYear\": 2015,\r",
							"    \"unit\": \"CH4\"\r",
							"}\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"const ActivityID = response.data.activityId;\r",
							"pm.collectionVariables.set(\"ActivityID\", ActivityID);\r",
							"\r",
							"const status = pm.iterationData.get(\"add_status\");\r",
							"\r",
							"pm.test(\"Activity created successfully - \" + response.data.activityId, function(){\r",
							"    pm.response.to.have.status(status);\r",
							"    pm.execution.setNextRequest(\"add_support\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://transparency-test.carbreg.org:9000/national/activities/add"
			},
			"response": []
		},
		{
			"name": "add_support",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let body = {\r",
							"    \"activityId\": pm.collectionVariables.get(\"ActivityID\"),\r",
							"    \"direction\": [\r",
							"    \"Needed\"\r",
							"  ],\r",
							"  \"financeNature\": [\r",
							"    \"International\"\r",
							"  ],\r",
							"  \"internationalSupportChannel\": [\r",
							"    \"Multilateral\"\r",
							"  ],\r",
							"  \"internationalFinancialInstrument\": [\r",
							"    \"Grant\"\r",
							"  ],\r",
							"  \"nationalFinancialInstrument\": [\r",
							"    \"Grant\"\r",
							"  ],\r",
							"  \"financingStatus\": [\r",
							"    \"Committed\"\r",
							"  ],\r",
							"  \"internationalSource\": [\r",
							"    \"AFC\"\r",
							"  ],\r",
							"    \"nationalSource\": \"test national source\",\r",
							"    \"requiredAmount\": 300,\r",
							"    \"neededLocal\": 6,\r",
							"    \"receivedAmount\": 500,\r",
							"    \"receivedLocal\": 10,\r",
							"    \"exchangeRate\": 50\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"const SupportID = response.data.supportId;\r",
							"pm.collectionVariables.set(\"SupportID\", SupportID);\r",
							"\r",
							"const status = pm.iterationData.get(\"add_status\");\r",
							"\r",
							"pm.test(\"Project created successfully - \" + response.data.supportId, function(){\r",
							"    pm.response.to.have.status(status);\r",
							"});\r",
							"\r",
							"if(pm.iterationData.get(\"validate\")){\r",
							"    pm.execution.setNextRequest(\"user_login_to_validate\");\r",
							"} else {\r",
							"    pm.execution.setNextRequest(null);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://transparency-test.carbreg.org:9000/national/supports/add"
			},
			"response": []
		},
		{
			"name": "user_login_to_validate",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let body = {\r",
							"  username: pm.iterationData.get(\"username\"),\r",
							"  password: String(pm.iterationData.get(\"password\"))\r",
							"};\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"if(pm.response.code === 201 || pm.response.code === 200) {\r",
							"\r",
							"    pm.test(response.role + \" login success!\", function(){\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"\r",
							"        const user_token = response.access_token;\r",
							"        pm.collectionVariables.set(\"user_token\",user_token);\r",
							"\r",
							"        pm.execution.setNextRequest(\"validate_action\");\r",
							"    });\r",
							"\r",
							"}else {\r",
							"    pm.test(\"User login failed!\", function(){\r",
							"        pm.expect(pm.response.code).to.be.oneOf([400, 401]);\r",
							"        pm.execution.setNextRequest(null);\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://transparency-test.carbreg.org:9000/national/auth/login"
			},
			"response": []
		},
		{
			"name": "validate_action",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"let body = {\r",
							"  \"entityId\": pm.collectionVariables.get(\"ActionID\"),\r",
							"  \"validateStatus\" : true\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const status = pm.iterationData.get(\"validate_status\");\r",
							"\r",
							"pm.test(\"Action verified successfully!\" , function(){\r",
							"    pm.response.to.have.status(status);\r",
							"    pm.execution.setNextRequest(\"validate_programme\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://transparency-test.carbreg.org:9000/national/actions/validateStatus"
			},
			"response": []
		},
		{
			"name": "validate_programme",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"let body = {\r",
							"  \"entityId\": pm.collectionVariables.get(\"ProgrammeID\"),\r",
							"  \"validateStatus\" : true\r",
							"// \"entityId\" : \"P030\"\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const status = pm.iterationData.get(\"validate_status\");\r",
							"\r",
							"pm.test(\"Programme verified successfully!\" , function(){\r",
							"    pm.response.to.have.status(status);\r",
							"    pm.execution.setNextRequest(\"validate_project\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://transparency-test.carbreg.org:9000/national/programmes/validateStatus"
			},
			"response": []
		},
		{
			"name": "validate_project",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"let body = {\r",
							"\"entityId\": pm.collectionVariables.get(\"ProjectID\"),\r",
							"\"validateStatus\" : true\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const status = pm.iterationData.get(\"validate_status\");\r",
							"\r",
							"pm.test(\"Project verified successfully!\" , function(){\r",
							"    pm.response.to.have.status(status);\r",
							"    pm.execution.setNextRequest(\"validate_activity\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://transparency-test.carbreg.org:9000/national/projects/validateStatus"
			},
			"response": []
		},
		{
			"name": "validate_activity",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"let body = {\r",
							"  \"entityId\": pm.collectionVariables.get(\"ActivityID\"),\r",
							"  \"validateStatus\" : true\r",
							"//   \"entityId\" : \"T00030\"\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const status = pm.iterationData.get(\"validate_status\");\r",
							"\r",
							"pm.test(\"Activity verified successfully!\" , function(){\r",
							"    pm.response.to.have.status(status);\r",
							"    pm.execution.setNextRequest(\"validate_support\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://transparency-test.carbreg.org:9000/national/activities/validateStatus"
			},
			"response": []
		},
		{
			"name": "validate_support",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"let body = {\r",
							"  \"entityId\": pm.collectionVariables.get(\"SupportID\"),\r",
							"  \"validateStatus\" : true\r",
							"//   \"entityId\" : \"S00030\"\r",
							"}\r",
							"\r",
							"var body_str = JSON.stringify(body);\r",
							"pm.collectionVariables.set(\"req_body\", body_str);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const status = pm.iterationData.get(\"validate_status\");\r",
							"\r",
							"pm.test(\"Support verified successfully!\" , function(){\r",
							"    pm.response.to.have.status(status);\r",
							"    pm.execution.setNextRequest(null);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{req_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://transparency-test.carbreg.org:9000/national/supports/validateStatus"
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{user_token}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "req_body",
			"value": ""
		},
		{
			"key": "user_token",
			"value": ""
		},
		{
			"key": "test-doc",
			"value": "data:application/pdf;base64,",
			"type": "string"
		},
		{
			"key": "pdf",
			"value": "data:application/pdf;base64,",
			"type": "string"
		},
		{
			"key": "doc",
			"value": "data:application/msword;base64,",
			"type": "string"
		},
		{
			"key": "ActionID",
			"value": ""
		},
		{
			"key": "ProgrammeID",
			"value": ""
		},
		{
			"key": "ProjectID",
			"value": ""
		},
		{
			"key": "ActivityID",
			"value": ""
		},
		{
			"key": "SupportID",
			"value": ""
		}
	]
}