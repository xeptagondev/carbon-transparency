name: Automating API Tests with Postman & Github Actions
on:
  workflow_dispatch:
  push:
    branches:
      - 'QA-pipeline'
    paths:
      - .github/workflows/api_automation_service*  

jobs:
  deploy:
      name: test deploy
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
        - name: Use Node.js ${{ matrix.node-version }}
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.node-version }}

        - name: Setup and run unit tests
          run: |
            cd backend/services
            yarn install
            yarn run test

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1
        - name: Build, tag, and push the image to Amazon ECR
          id: build-image
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: transparency-services
            IMAGE_TAG: ${{ github.head_ref || github.ref_name }} 
          run: |
            # Build a docker container and push it to ECR 
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f backend/services/Dockerfile .
            echo "Pushing image to ECR..."
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

        - name: Wait for 1 min
          run: sleep 60

# Run API Test
  automated-api-tests:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
        - name: Install Newman
          run: npm install -g newman

        - name: Install Dependencies
          run: |
            npm install -g newman newman-reporter-html
            npm install puppeteer

        - name: Run Test API
          if: always()
          run: |
            newman run "testing/api/test-api.json" \
            -d ./testing/api/Test-API-Automation.csv \
            --environment ./testing/api/RemoteEnv.postman_environment.json \
            --env-var "password=${{ secrets.ROOT_PASSWORD }}" \
            --reporters cli,html \
            --reporter-html-export=./testing/api/report.html

        - name: Check HTML Report Exists
          run: |
            if [ -f ./testing/api/report.html ]; then echo "HTML report exists."; else exit 1; fi

        - name: Convert HTML Report to PDF
          run: |
            node -e "const puppeteer = require('puppeteer'); (async () => { 
              const browser = await puppeteer.launch(); 
              const page = await browser.newPage(); 
              await page.goto('file://' + process.cwd() + '/testing/api/report.html', { waitUntil: 'networkidle0' }); 
              await page.pdf({ path: 'testing/api/report.pdf', format: 'A4' }); 
              await browser.close(); 
            })();"

        - name: List files after conversion
          run: ls -R ./testing/api/

        - name: Send Report via Email
          uses: dawidd6/action-send-mail@v3
          with:
            server_address: email-smtp.us-east-1.amazonaws.com
            server_port: 587
            username: ${{ secrets.SMTP_USERNAME }}
            password: ${{ secrets.SMTP_PASSWORD }}
            subject: "API Test - Summary Report"
            body: "Please find the attached API test report."
            from: "Transparency System <info@xeptagon.com>"
            to: yashodhas@xeptagon.com
            cc: akilae@xeptagon.com,tharindug@xeptagon.com
            attachments: ./testing/api/report.pdf
